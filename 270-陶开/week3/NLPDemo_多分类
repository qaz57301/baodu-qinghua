import numpy as np
import torch
import torch.nn as nn
import random
import matplotlib.pylab as plt
import json

"""
基于pytorch的网络编写
实现一个网络完成一个简单的nlp任务
判断文本中是否有某些特定字符出现
"""
class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim)
        self.pool = nn.AvgPool1d(sentence_length)           # 池化层，将整个句子pooling到一个向量上
        self.classify = nn.Linear(vector_dim, 3)               # 线性层
        self.activation = torch.sigmoid                        # sigmoid 归一化函数
        self.activation = torch.softmax                        # sigmoid 归一化函数
        self.loss = nn.functional.mse_loss                     # 均方差损失函数

    def forward(self, x, y=None):
        x = self.embedding(x)
        x = self.pool(x.transpose(1, 2)).squeeze()
        y = self.classify(x)
        y_pred = self.activation(y)
        if y is not None:
            loss = self.loss(y_pred, y)
        else:
            loss = y_pred
        return loss


def build_vocab():
    chars = "abcdefghijklmnopqrstuvwxyz"
    vocab = {}
    for index, word in enumerate(chars):
        vocab[word] = index
    vocab["unk"] = len(vocab)
    return vocab



def build_sample(vocab, sentence_length):
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]
    if set("xyz")&set(x):
        y = 1
    elif set("abc")&set(x):
        y = 2
    else:
        y = 0
    x = [vocab.get(word, vocab["unk"]) for word in x]
    return x, y

# 数据集
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.FloatTensor(dataset_y)

# 建模
def build_model(vocab, char_dim, sentence_length):
    model = TorchModel(char_dim, sentence_length, vocab)
    return model

# 测试代码
# 用来测试每轮模型的准确率
def evaluate(model, vocab, sentence_length):
    model.eval()
    x, y = build_dataset(200, vocab, sentence_length)
    # print("本次预测集中共有%d个正样本，%d个负样本" %(sum(y), 200 - sum(y)))
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)         #模型预测
        for y_p, y_t in zip(y_pred, y):
            if float(y_p)<0.5 and int(y_t)==0:
                correct+=1
            elif float(y_p)>=0.5 and int(y_t)==1:
                correct+=1
            else:
                wrong+=1
    print("正确预测个数: %d, 正确率: %f" %(correct, correct/(correct+wrong)))
    return correct/(correct+wrong)

def main():
    epoch_num = 200      # 训练轮数
    batch_size = 20      # 每轮训练样本个数
    train_sample = 500   # 每轮总共训练的样本个数
    char_dim = 2         # 每个字的维度
    sentence_length = 6  # 每个句子的长度
    learning_rate = 0.05  # 学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(vocab, char_dim, sentence_length)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        # 两批x输入模型，得到两个损失值，平均值最为最终的损失值
        for batch in range(int(train_sample/epoch_num)):
            # x.size = (batch_size, sentence_length)
            x, y = build_dataset(batch_size, vocab, sentence_length)
            # print(x)
            optim.zero_grad()        # 梯度归零
            loss = model(x, y)      # 计算损失
            loss.backward()         # 计算梯度
            optim.step()            # 更新权重
            # print("loss_item", loss)
            watch_loss.append(loss.item())  #
        print("=========\n 第%d 轮的平均损失值为loss: %f"%(epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)     # 测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])
        print(loss)
    # 画图
    plt.plot(range(len(log)),[l[0] for l in log])
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  # 画loss曲线
    plt.legend()
    plt.show()
    #保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return

#使用训练好的模型做预测
def predict(model_path, vocab_path, input_string):
    char_dim = 20         # 每个字的维度
    sentence_length = 6
    vocab = json.load(open(vocab_path, "r", encoding="utf8"))
    model = build_model(vocab, char_dim, sentence_length)
    model.load_state_dict(torch.load(model_path))
    x = []
    x.append([vocab[char] for char in input_string])
    model.eval()
    with torch.no_grad():        # 不计算梯度
        result = model.forward(torch.LongTensor(x))      # 模型预测
    for i, input_string in enumerate(input_string):
        print("输入： %s, 预测类别：%d, 概率值：%f"%(input_string, round(float(result[i])), result[i]))  # 打印结果




if __name__ == '__main__':
    main()
    # test_strings = ["ffvfee", "wwsdfg", "rqwdbg", "nakwww"]
    # predict("model.pth", "vocab.json", test_strings)















